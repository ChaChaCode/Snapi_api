import asyncio
import logging
import aiohttp
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®-–¢–û–ö–ï–ù-–ë–û–¢–ê"

# SNAPI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–∞—à –≤—ã–¥–∞–Ω–Ω—ã–π API)
SNAPI_URL = "https://snapi.fun/api/api-keys"
API_KEY = "–í–ê–®-–ê–ü–ò-SNAPI"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

async def check_user_dialog(user_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ SNAPI"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{SNAPI_URL}/check-dialog",
                    headers={
                        "Authorization": f"Bearer {API_KEY}",
                        "Content-Type": "application/json"
                    },
                    json={"user_id": user_id},
                    timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 401:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"}
                elif response.status == 429:
                    return {"status": "error", "message": "–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API"}
                else:
                    error_text = await response.text()
                    return {"status": "error", "message": f"HTTP {response.status}: {error_text}"}
    except asyncio.TimeoutError:
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SNAPI: {str(e)}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"}

async def get_api_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API —á–µ—Ä–µ–∑ endpoint GET /api-info"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f"{SNAPI_URL}/api-info",
                    headers={
                        "Authorization": f"Bearer {API_KEY}",
                        "Content-Type": "application/json"
                    },
                    timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 401:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"}
                elif response.status == 429:
                    return {"status": "error", "message": "–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API"}
                else:
                    error_text = await response.text()
                    return {"status": "error", "message": f"HTTP {response.status}: {error_text}"}
    except asyncio.TimeoutError:
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SNAPI (api-info): {str(e)}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"}

async def get_usage_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ endpoint GET /usage-stats"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f"{SNAPI_URL}/usage-stats",
                    headers={
                        "Authorization": f"Bearer {API_KEY}",
                        "Content-Type": "application/json"
                    },
                    timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 401:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"}
                elif response.status == 429:
                    return {"status": "error", "message": "–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API"}
                else:
                    error_text = await response.text()
                    return {"status": "error", "message": f"HTTP {response.status}: {error_text}"}
    except asyncio.TimeoutError:
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SNAPI (usage-stats): {str(e)}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –¥–∏–∞–ª–æ–≥", callback_data="check_my_dialog")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API", callback_data="usage_stats")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API", callback_data="api_info")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="info")]
    ])
    text = (
        f"ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç SNAPI\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"üéØ –≠—Ç–æ—Ç –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å SNAPI API\n\n"
        f"üì± –í–∞—à ID: {message.from_user.id}"
    )
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "check_my_dialog")
async def check_my_dialog(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback_query.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º...")
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(
        f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–∞\n\n"
        f"üë§ User ID: {user_id}\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SNAPI..."
    )
    result = await check_user_dialog(user_id)
    if result.get("status") == "found":
        status_emoji = "‚úÖ"
        status_text = "–î–∏–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω!"
        description = "–£ –≤–∞—Å –µ—Å—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º"
    elif result.get("status") == "not_found":
        status_emoji = "‚ùå"
        status_text = "–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        description = "–í—ã –µ—â—ë –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º"
    else:
        status_emoji = "‚ö†Ô∏è"
        status_text = "–û—à–∏–±–∫–∞"
        description = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_my_dialog")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    result_text = (
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        f"üë§ User ID: {user_id}\n"
        f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"<pre>{json.dumps(result, indent=2, ensure_ascii=False)}</pre>"
    )
    await callback_query.message.edit_text(
        result_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "api_info")
async def show_api_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API"""
    await callback_query.answer("‚ÑπÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API...")
    await callback_query.message.edit_text(
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SNAPI..."
    )
    result = await get_api_info()
    status_emoji = "‚úÖ" if result.get("status") != "error" else "‚ö†Ô∏è"
    status_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞" if result.get("status") != "error" else "–û—à–∏–±–∫–∞"
    description = result.get("message", "–î–∞–Ω–Ω—ã–µ –æ–± API –ø–æ–ª—É—á–µ–Ω—ã") if result.get("status") != "error" else result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="api_info")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    result_text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API\n\n"
        f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"<pre>{json.dumps(result, indent=2, ensure_ascii=False)}</pre>"
    )
    await callback_query.message.edit_text(
        result_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "usage_stats")
async def show_usage_stats(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    await callback_query.answer("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    await callback_query.message.edit_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SNAPI..."
    )
    result = await get_usage_stats()
    status_emoji = "‚úÖ" if result.get("status") != "error" else "‚ö†Ô∏è"
    status_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞" if result.get("status") != "error" else "–û—à–∏–±–∫–∞"
    description = result.get("message", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API") if result.get("status") != "error" else result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="usage_stats")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    result_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API\n\n"
        f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"<pre>{json.dumps(result, indent=2, ensure_ascii=False)}</pre>"
    )
    await callback_query.message.edit_text(
        result_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "info")
async def show_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    info_text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        f"ü§ñ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SNAPI API\n"
        f"üîó API URL: {SNAPI_URL}\n"
        f"üîë API Key: {API_KEY[:20]}...\n\n"
        f"üéØ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:\n"
        f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ SNAPI API\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
        f"üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        f"1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é\n"
        f"2. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ SNAPI\n"
        f"3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    )
    await callback_query.message.edit_text(
        info_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "back_to_start")
async def back_to_start(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –¥–∏–∞–ª–æ–≥", callback_data="check_my_dialog")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API", callback_data="usage_stats")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API", callback_data="api_info")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="info")]
    ])
    text = (
        f"ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç SNAPI\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}!\n\n"
        f"üéØ –≠—Ç–æ—Ç –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å SNAPI API\n\n"
        f"üì± –í–∞—à ID: {callback_query.from_user.id}"
    )
    await callback_query.message.edit_text(text, reply_markup=keyboard)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ SNAPI...")
    logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: {SNAPI_URL}")
    logger.info(f"üîë API Key: {API_KEY[:20]}...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
